[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform vec2 otherPlayerCenter1;
uniform bool otherPlayerAlive1;

uniform vec2 otherPlayerCenter2;
uniform bool otherPlayerAlive2;

uniform float movementRange;
uniform vec4 instanceRandom;

varying smooth vec2 localPosition;

const float lThickness = 2.0;
const float pThickness = 2.0 * sqrt(2);

void vertex(){
    localPosition = VERTEX;
}

void fragment(){
	float angle = atan(localPosition.y, localPosition.x);
	float l = length(localPosition)
		+ sin(angle * 10.0 + TIME * (5.0 + instanceRandom.x) + instanceRandom.z) * 5.0
		+ sin(angle * 17.0 - TIME * (3.0 + instanceRandom.y) + instanceRandom.w) * 5.0;
	float p1 = otherPlayerAlive1 ? l - length(localPosition - otherPlayerCenter1) : -movementRange;
	float p2 = otherPlayerAlive2 ? l - length(localPosition - otherPlayerCenter2) : -movementRange;
	float li = l - movementRange;
	
	if (
		(p1 < pThickness && p2 < pThickness && abs(li) < lThickness) ||
		(p1 < pThickness && li < lThickness && abs(p2) < pThickness) ||
		(p2 < pThickness && li < lThickness && abs(p1) < pThickness)
	)
	{
		COLOR = vec4(1.0, 1.0, 1.0, 1.0)
	}
	else {
		discard;
	}
}"
